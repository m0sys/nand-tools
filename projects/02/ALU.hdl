// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    /* Zeros of x & y. */
    And16 (a=x, out=xz);
    And16 (a=y, out=yz);

    /* Select x & y. */
    Mux16 (a=x, b=xz, sel=zx, out=sel-xz);
    Mux16 (a=y, b=yz, sel=zy, out=sel-yz);

    /* Negations of x & y. */
    Not16 (in=sel-xz, out=xn);
    Not16 (in=sel-yz, out=yn);

    /* Select x & y. */
    Mux16 (a=sel-xz, b=xn, sel=nx, out=sel-x);
    Mux16 (a=sel-yz, b=yn, sel=ny, out=sel-y);

    /* Compute logic + add. */
    Add16 (a=sel-x, b=sel-y, out=add-xy);
    And16 (a=sel-x, b=sel-y, out=and-xy);

    /* Select output op. */
    Mux16 (a=and-xy, b=add-xy, sel=f, out=out1);

    /* Bitwise not */
    Not16 (in=out1, out=nout);
    Mux16 (a=out1, b=nout, sel=no, out=out, out[15]=ng, out[0..7]=z1, out[8..15]=z2);

    /* Compute zr, ng */
    Or8Way (in=z1, out=o1);
    Or8Way (in=z2, out=o2);

    Or (a=o1, b=o2, out=z3);
    Not (in=z3, out=zr);
}
